(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{432:function(e,v,t){e.exports=t.p+"assets/img/event_loop.c3f59522.jpg"},568:function(e,v,t){"use strict";t.r(v);var _=t(54),o=Object(_.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"javascript运行机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript运行机制"}},[e._v("#")]),e._v(" Javascript运行机制")]),e._v(" "),_("blockquote",[_("p",[e._v("Javascript是一种单线程开发语言。理解Javascript的运行机制是日常编码必须要掌握的技能。")])]),e._v(" "),_("p",[e._v("会讲述以下内容")]),e._v(" "),_("ol",[_("li",[e._v("JS单进程的优缺点")]),e._v(" "),_("li",[e._v("Event Loop")]),e._v(" "),_("li",[e._v("宏任务和微任务")]),e._v(" "),_("li",[e._v("实例讲解")])]),e._v(" "),_("h3",{attrs:{id:"为什么是单线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么是单线程"}},[e._v("#")]),e._v(" 为什么是单线程？")]),e._v(" "),_("p",[e._v("JavaScript的主要用途是与用户交互，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。")]),e._v(" "),_("ul",[_("li",[e._v("假设：如果JavaScript支持多线程，一个线程在某个DOM节点上添加内容，另外一个线程删除了这个节点，那么浏览器该以哪个线程为准呢？")])]),e._v(" "),_("p",[e._v("单线程也避免了多线程的线程创建、线程上下文切换的开销。（Nginx 也是单线程的）")]),e._v(" "),_("h3",{attrs:{id:"单线程的缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单线程的缺点"}},[e._v("#")]),e._v(" 单线程的缺点")]),e._v(" "),_("p",[e._v("单线程就意味着容易发生线程等待资源，cpu空闲，而其他任务一直等待的问题。")]),e._v(" "),_("h3",{attrs:{id:"什么是event-loop-事件循环"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是event-loop-事件循环"}},[e._v("#")]),e._v(" 什么是Event Loop（事件循环）")]),e._v(" "),_("p",[e._v("为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，防止主线程阻塞。于是Javascript设计者将所有任务分为两种，一种是同步任务，一种是异步任务")]),e._v(" "),_("ul",[_("li",[e._v("同步任务指的是，在"),_("code",[e._v("主线程")]),e._v("上排队执行的任务\n"),_("ul",[_("li",[e._v("同步任务只有前一个任务执行完毕，才能执行下一个任务。")]),e._v(" "),_("li",[e._v("同步任务都在主线程上执行，形成一个"),_("code",[e._v("执行栈")]),e._v(" "),_("ul",[_("li",[e._v("每次执行栈执行的代码就是一个宏任务")])])])])]),e._v(" "),_("li",[e._v("异步任务指的是，不进入主线程，而进入"),_("code",[e._v("任务队列")]),e._v("的任务。\n"),_("ul",[_("li",[e._v('只要指定过回调函数，这些事件发生时就会进入"任务队列"（比如鼠标点击...等）')]),e._v(" "),_("li",[e._v("一旦"),_("code",[e._v("执行栈中的所有同步任务执行完毕")]),e._v("，系统就会读取“任务队列”。")]),e._v(" "),_("li",[e._v("任务队列是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。")])])])]),e._v(" "),_("p",[e._v('"主线程"从"任务队列"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。')]),e._v(" "),_("h3",{attrs:{id:"宏任务和微任务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务"}},[e._v("#")]),e._v(" 宏任务和微任务")]),e._v(" "),_("p",[e._v("根据规范：每个任务都有一个任务源(task source)，源自同一个任务源的 task 必须放到同一个任务队列，从不同源来的则被添加到不同队列，所以有了宏任务(macro)task和微任务(micro)task。")]),e._v(" "),_("p",[e._v("浏览器为了能够使得JS内部(macro)task与DOM任务能够有序的执行，会在"),_("strong",[e._v("一个task执行结束后，在下一个(macro)task 执行开始前，对页面进行重新渲染")]),e._v("，")]),e._v(" "),_("p",[_("strong",[e._v("每次执行完一个宏任务之后，会去检查是否存在微任务")]),e._v("；如果有，则执行微任务直至"),_("strong",[e._v("清空微任务队列")]),e._v("（如果在微任务执行期间微任务队列加入了新的微任务，会将新的微任务加入队列尾部，之后也会被执行）。")]),e._v(" "),_("p",[e._v("根据上述总结流程为：")]),e._v(" "),_("p",[_("img",{attrs:{src:t(432),alt:"流程图"}})]),e._v(" "),_("p",[e._v("附（宏/微任务清单）：")]),e._v(" "),_("ul",[_("li",[e._v("宏任务(macro)task主要有： script(整体代码)、setTimeout、setInterval、I/O、UI交互事件、postMessage、MessageChannel、setImmediate(Node.js 环境)")]),e._v(" "),_("li",[e._v("微任务(micro)task主要有： Promise.then、MutaionObserver、process.nextTick(Node.js 环境)")]),e._v(" "),_("li",[_("code",[e._v("requestAnimationFrame")]),e._v(" 既不属于宏任务, 也不属于微任务")])]),e._v(" "),_("p",[_("s",[e._v("目前宏任务和微任务在各浏览器执行都有差异，最后提议promise为微任务")])]),e._v(" "),_("h3",{attrs:{id:"实例分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实例分析"}},[e._v("#")]),e._v(" 实例分析")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("    console.log(1)\n\n    Promise.resolve(2).then(console.log)\n\n    requestIdleCallback(() => {\n        console.log(3);\n        Promise.resolve(4).then(console.log)\n    })\n\n    setTimeout(() => {\n        console.log(6)\n        Promise.resolve(7).then(console.log)\n    }, 0)\n\n    requestAnimationFrame(() => {\n        console.log(8)\n        Promise.resolve(9).then(console.log)\n    })\n\n    var intersectionObserver = new IntersectionObserver(function(entries) {\n     \tif (entries[0].intersectionRatio <= 0) return;\n      \tconsole.log('LoadedNewItems');\n      \tPromise.resolve('doSomething').then(console.log)\n    });\n    // 开始监听\n    intersectionObserver.observe(document.querySelector('div'));\n\n    new Promise(reslove => reslove(5)).then(console.log)\n\n    console.log(10)\n")])])]),_("p",[e._v("以上案例会打印 "),_("code",[e._v("1 10 2 5")]),e._v(" -> undefined -> "),_("code",[e._v("8 9 LoadedNewItems doSomething 6 7 3 4")]),e._v("\n如果没有 "),_("code",[e._v("intersectionObserver")]),e._v(" 会打印  "),_("code",[e._v("1 10 2 5")]),e._v(" -> undefined -> "),_("code",[e._v("8 9 3 4 6 7")])]),e._v(" "),_("p",[e._v("结果解析：")]),e._v(" "),_("ol",[_("li",[e._v("JavaScript执行主线程任务："),_("code",[e._v("打印 1 10")]),e._v(" "),_("ul",[_("li",[e._v("附：Promise构造器内部是同步任务")])])]),e._v(" "),_("li",[e._v("执行微任务队列："),_("code",[e._v("打印 2 5")])]),e._v(" "),_("li",[e._v("宏任务和微任务都执行完成："),_("code",[e._v("打印 undefined")])]),e._v(" "),_("li",[e._v("执行"),_("code",[e._v("requestAnimationFrame")]),e._v(" ，"),_("code",[e._v("打印 8")])]),e._v(" "),_("li",[e._v("执行"),_("code",[e._v("requestAnimationFrame")]),e._v("的微任务，"),_("code",[e._v("打印 9")])]),e._v(" "),_("li",[e._v("执行"),_("code",[e._v("IntersectionObserver")]),e._v("，"),_("code",[e._v("打印 LoadedNewItems")])]),e._v(" "),_("li",[e._v("执行"),_("code",[e._v("IntersectionObserver")]),e._v("的微任务，"),_("code",[e._v("打印 doSomething")])]),e._v(" "),_("li",[_("strong",[e._v("更新界面")])]),e._v(" "),_("li",[e._v("如果浏览器空闲，调用"),_("code",[e._v("requestIdleCallback")]),e._v("，"),_("code",[e._v("打印 3")]),e._v(" "),_("ul",[_("li",[e._v("如果"),_("code",[e._v("requestIdleCallback")]),e._v("被调用，那么会继续执行微任务，"),_("code",[e._v("打印 4")])])])]),e._v(" "),_("li",[e._v("一帧结束：")]),e._v(" "),_("li",[e._v("下一帧开始：执行"),_("code",[e._v("settimeout")]),e._v("，"),_("code",[e._v("打印 6")])]),e._v(" "),_("li",[e._v("执行"),_("code",[e._v("settimeout")]),e._v("的微任务，"),_("code",[e._v("打印 7")])])]),e._v(" "),_("h3",{attrs:{id:"结论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[e._v("#")]),e._v(" 结论")]),e._v(" "),_("ol",[_("li",[e._v("宏任务")]),e._v(" "),_("li",[e._v("微任务")]),e._v(" "),_("li",[e._v("requestAnimationFrame")]),e._v(" "),_("li",[e._v("IntersectionObserver")]),e._v(" "),_("li",[e._v("更新界面")]),e._v(" "),_("li",[e._v("requestIdleCallback")]),e._v(" "),_("li",[e._v("下一帧")])])])}),[],!1,null,null,null);v.default=o.exports}}]);