(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{581:function(t,r,e){"use strict";e.r(r);var a=e(54),n=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"迭代器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),e("blockquote",[e("p",[t._v("JavaScript 到了 ES6 才有原生的 Iterator")])]),t._v(" "),e("p",[t._v("讲述以下内容")]),t._v(" "),e("ul",[e("li",[t._v("什么是迭代器")]),t._v(" "),e("li",[t._v("自带迭代器的对象")]),t._v(" "),e("li",[t._v("使用迭代器")]),t._v(" "),e("li",[t._v("实现迭代器")]),t._v(" "),e("li",[t._v("迭代器的使用场景")])]),t._v(" "),e("h3",{attrs:{id:"什么是迭代器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是迭代器"}},[t._v("#")]),t._v(" 什么是迭代器")]),t._v(" "),e("p",[t._v("迭代器（Iterator）是一种统一的接口。为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。")]),t._v(" "),e("p",[t._v("一个数据结构只要具有"),e("code",[t._v("Symbol.iterator")]),t._v("属性，就可以认为是“可遍历的”（iterable）,。"),e("code",[t._v("Symbol.iterator")]),t._v("属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。")]),t._v(" "),e("p",[t._v("至于属性名Symbol.iterator，它是一个表达式，返回Symbol对象的iterator属性，这是一个预定义好的、类型为 Symbol 的特殊值。")]),t._v(" "),e("p",[t._v("Iterator 的作用有三个：")]),t._v(" "),e("ul",[e("li",[t._v("一是：为各种数据结构，提供一个统一的、简便的访问接口")]),t._v(" "),e("li",[t._v("二是：使得数据结构的成员能够按某种次序排列\n"),e("ul",[e("li",[t._v("对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的")])])]),t._v(" "),e("li",[t._v("三是：ES6 创造了一种新的遍历命令for...of循环，Iterator 接口主要供for...of消费。")])]),t._v(" "),e("p",[t._v("为对象实现迭代器")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  let obj = {\n    data: [ 'hello', 'world' ],\n    [Symbol.iterator]() {\n      const self = this;\n      let index = 0;\n      return {\n        next() {\n          if (index < self.data.length) {\n            return {\n              value: self.data[index++],\n              done: false\n            };\n          } else {\n            return { value: undefined, done: true };\n          }\n        }\n      };\n    }\n  };\n\n  for (let o of obj) {\n    console.log(o);\n  }\n")])])]),e("h3",{attrs:{id:"自带迭代器的对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自带迭代器的对象"}},[t._v("#")]),t._v(" 自带迭代器的对象")]),t._v(" "),e("ul",[e("li",[t._v("Array()")]),t._v(" "),e("li",[t._v("Map()")]),t._v(" "),e("li",[t._v("Set()")]),t._v(" "),e("li",[t._v("[...document.querySelectorAll('div')] // 类数组")]),t._v(" "),e("li",[t._v("arguments // 类数组")]),t._v(" "),e("li",[t._v("String类型 // 类数组")])]),t._v(" "),e("h3",{attrs:{id:"使用迭代器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用迭代器"}},[t._v("#")]),t._v(" 使用迭代器")]),t._v(" "),e("ol",[e("li",[t._v("显式使用")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  var arr = [1, 2, 3];\n  var iterator = arr[Symbol.iterator]();\n  iterator.next(); // { value: 1, done: false }\n  iterator.next(); // { value: 2, done: false }\n  iterator.next(); // { value: 3, done: false }\n  iterator.next(); // { value: undefined, done: true }\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("扩展运算符")]),t._v(" "),e("li",[t._v("yield*")]),t._v(" "),e("li",[t._v("for of 循环")]),t._v(" "),e("li",[t._v("Promise.all()")]),t._v(" "),e("li",[t._v("Promise.race()")]),t._v(" "),e("li",[t._v("Array.from()")])]),t._v(" "),e("p",[t._v("生成器（Generator）和迭代器的组合")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  let myIterable = {\n    [Symbol.iterator]: function* () {\n      yield {x: 1};\n      yield {y: 2};\n      yield {z: 3};\n    }\n  }\n  let arr = [...myIterable];\n  console.log(arr); \n  // [{…}, {…}, {…}]\n\n  // 或者采用下面的简洁写法\n\n  let obj = {\n    * [Symbol.iterator]() {\n      yield 'hello';\n      yield 'world';\n    }\n  };\n\n  for (let x of obj) {\n    console.log(x);\n  }\n  // \"hello\"\n  // \"world\"\n")])])]),e("h3",{attrs:{id:"实现数组迭代器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现数组迭代器"}},[t._v("#")]),t._v(" 实现数组迭代器")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  class MyIterator {\n    constructor(arr) {\n      // protoToString = Object.prototype.toString\n      if (protoToString.call(arr) !== "[object Array]") {\n        throw new Error("参数不是数组")\n      }\n      this._array = arr;\n      this._cursor = 0;\n    }\n\n    next() {\n      return this._cursor < this._array.length ?\n      { value: this._array[this._cursor++], done: false } :\n      { done: true };\n    }\n  }\n')])])])])}),[],!1,null,null,null);r.default=n.exports}}]);