(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{435:function(v,_,t){v.exports=t.p+"assets/img/bianyiqi.2308f300.png"},436:function(v,_,t){v.exports=t.p+"assets/img/yufafenxi.3605f4c2.png"},437:function(v,_,t){v.exports=t.p+"assets/img/cisu.a94b44ca.png"},438:function(v,_,t){v.exports=t.p+"assets/img/cifadanyuan.7cb6265a.png"},439:function(v,_,t){v.exports=t.p+"assets/img/zuoyongyulian.cf7d6854.png"},582:function(v,_,t){"use strict";t.r(_);var a=t(54),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"《编译原理》第二版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#《编译原理》第二版"}},[v._v("#")]),v._v(" 《编译原理》第二版")]),v._v(" "),a("p",[v._v("JavaScript是脚本语言：具有高层次运算符的解释型语言（JS、PHP、Python等）")]),v._v(" "),a("h3",{attrs:{id:"可靠的程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可靠的程序"}},[v._v("#")]),v._v(" 可靠的程序")]),v._v(" "),a("p",[v._v("一个软件系统最重要的就是：快速、经济、可靠")]),v._v(" "),a("p",[v._v("类型检查是一种有效的，被充分研究的技术（成熟），它可以被用于捕捉程序中的不一致性，它可以用来检测一些错误（可靠）。")]),v._v(" "),a("p",[v._v("垃圾收集机制是：在"),a("code",[v._v("效率")]),v._v("和"),a("code",[v._v("易编程")]),v._v("及软件"),a("code",[v._v("可靠性")]),v._v("之间进行的"),a("code",[v._v("折中处理")]),v._v("的极好方式")]),v._v(" "),a("h3",{attrs:{id:"名词解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#名词解释"}},[v._v("#")]),v._v(" 名词解释")]),v._v(" "),a("ul",[a("li",[v._v("符号表：符号表是一种供编译器用于保存相关源程序构造的各种信息的数据结构。这些信息在编译器分析阶段被逐步收集并放入符号表，它们在综合阶段用于生成目标代码。\n"),a("ul",[a("li",[v._v("保留字也保存在符号表中，在词法分析时使用")])])]),v._v(" "),a("li",[v._v("编译器和解释器：例如，Java源码 首先要被"),a("code",[v._v("编译器")]),v._v("编译成 字节码(bytecode) "),a("code",[v._v(".class")]),v._v(" 文件，然后经过一个虚拟机（"),a("code",[v._v("解释器")]),v._v("）对字节码进行解释执行。")]),v._v(" "),a("li",[v._v("而在编译器之前：一个源程序可能被分割成多个模块，并存放在独立的文件中，把源程序聚合在一起的任务 "),a("strong",[v._v("有时")]),v._v(" 会由一个被称为"),a("code",[v._v("预处理器")]),v._v("的程序独立完成。")])]),v._v(" "),a("h3",{attrs:{id:"编译器的结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器的结构"}},[v._v("#")]),v._v(" 编译器的结构")]),v._v(" "),a("ol",[a("li",[v._v("分析部分（编译器的前端）\n"),a("ol",[a("li",[v._v("把源码分解成多个组成要素")]),v._v(" "),a("li",[v._v("在组成要素的基础上加上语法结构")]),v._v(" "),a("li",[v._v("使用这个结构创建")]),v._v(" "),a("li",[v._v("会进行静态检查（语法检查、类型检查）")])])]),v._v(" "),a("li",[v._v("综合部分（编译器的后端）\n"),a("ol",[a("li",[v._v("根据分析部分的"),a("code",[v._v("中间表示")]),v._v("和"),a("code",[v._v("符号表中的信息")]),v._v("来构造目标程序")])])])]),v._v(" "),a("h3",{attrs:{id:"编译器主要行为步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器主要行为步骤"}},[v._v("#")]),v._v(" 编译器主要行为步骤")]),v._v(" "),a("ol",[a("li",[v._v("词法分析 -> 符号流\n"),a("ul",[a("li",[v._v("识别：关键字、标识符、操作符、字面量")]),v._v(" "),a("li",[v._v("将程序分割成一个个 "),a("code",[v._v("Token")]),v._v(" 的过程，（这里有"),a("code",[v._v("自动机")]),v._v("的概念）")])])]),v._v(" "),a("li",[v._v("语法分析 -> 抽象语法树\n"),a("ul",[a("li",[v._v("在词法分析的基础上识别出语法结构，形成 AST")])])]),v._v(" "),a("li",[v._v("语义分析\n"),a("ul",[a("li",[v._v("消除语义模糊，生成一些属性信息，让计算机能够依据这些信息生成目标代码。")])])]),v._v(" "),a("li",[v._v("中间代码生成器 -> 中间表示形式")]),v._v(" "),a("li",[v._v("机器无关代码优化器")]),v._v(" "),a("li",[v._v("代码生成器 -> 目标机器语言")]),v._v(" "),a("li",[v._v("机器相关代码优化器")])]),v._v(" "),a("p",[v._v("详细步骤：")]),v._v(" "),a("p",[a("img",{attrs:{src:t(435),alt:"编译器"}})]),v._v(" "),a("h3",{attrs:{id:"编译过程划分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译过程划分"}},[v._v("#")]),v._v(" 编译过程划分")]),v._v(" "),a("p",[v._v("编译器是一个自顶向下，逐行读取，深度优先的翻译过程，构造一个语法要从源语言的文法开始：")]),v._v(" "),a("p",[v._v("把编译过程的分析分析部分划分为词法分析和语法分析，原因")]),v._v(" "),a("ol",[a("li",[v._v("最重要原因：简化编译器的设计")]),v._v(" "),a("li",[v._v("提高编译器的效率")]),v._v(" "),a("li",[v._v("增强编译器的可移植性")])]),v._v(" "),a("h3",{attrs:{id:"语法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法分析"}},[v._v("#")]),v._v(" 语法分析")]),v._v(" "),a("ol",[a("li",[v._v("剔除空白和注释：")]),v._v(" "),a("li",[v._v("预读：（比如遇到"),a("code",[v._v(">")]),v._v("那么就要预先读入一个字符，如果下一个字符是"),a("code",[v._v("=")]),v._v("，那么会组合成"),a("code",[v._v(">=")]),v._v("）")]),v._v(" "),a("li",[v._v("常量：（比如："),a("code",[v._v("31 + 28 + 59")]),v._v("会被转换为 "),a("code",[v._v("<num, 31> <+> <num, 28> <+> <num, 59>")]),v._v("）")]),v._v(" "),a("li",[v._v("识别关键字和标识符（保留字 和 单一表示）")])]),v._v(" "),a("p",[v._v("中间代码的两种形式：")]),v._v(" "),a("ol",[a("li",[v._v("抽象语法树（"),a("code",[v._v("AST")]),v._v("）：用来表示源码的层次化语法结构，节点表示有意义的程序构造")]),v._v(" "),a("li",[v._v("线性表示：“三地址”指令序列：显示更加完整的示例，由基本程序步骤（比如两个值相加）组成，最多只执行一个运算")])]),v._v(" "),a("p",[v._v("上下文无关文法：一种描述程序设计语言语法的表示方法，由四要素组成")]),v._v(" "),a("ol",[a("li",[v._v("一个终结符号集合")]),v._v(" "),a("li",[v._v("一个非终结符号集合")]),v._v(" "),a("li",[v._v("一个产生式符号集合")]),v._v(" "),a("li",[v._v("指定一个非终结符号为开始符号")])]),v._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[v._v("    // 一个 if-else 语句通常具有以下形式：\n    if (expression) statement else statement\n    // -> 构造规则可以表示为\n    stmt -> if (expr) stmt else stmt\n")])])]),a("p",[v._v("语法分析树：用图形的方式展示了从上下文无关文法的开始符号推导出相应语言中的符号串的过程。一个上下文无关文法可能有多颗语法分析树的终结符，这样的上下文无关文法具有二义性。 - -。")]),v._v(" "),a("p",[v._v("一个语句的两种可能翻译结果")]),v._v(" "),a("p",[a("img",{attrs:{src:t(436),alt:"语法分析"}})]),v._v(" "),a("h3",{attrs:{id:"词法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词法分析"}},[v._v("#")]),v._v(" 词法分析")]),v._v(" "),a("p",[v._v("主要有3个相关部分")]),v._v(" "),a("ol",[a("li",[v._v("词法单元：")]),v._v(" "),a("li",[v._v("模式：")]),v._v(" "),a("li",[v._v("词素：")])]),v._v(" "),a("p",[a("img",{attrs:{src:t(437),alt:"语法分析3部分"}})]),v._v(" "),a("p",[v._v("加快源程序读入速度的方法：")]),v._v(" "),a("ol",[a("li",[v._v("缓冲区对：两个交替读入的缓冲区\n"),a("ol",[a("li",[v._v("lexemeBegin 指针：指向当前词素的开始处")]),v._v(" "),a("li",[v._v("forward 指针：一直向前扫描，直到发现某个模式被匹配为止，指向词素的结尾")])])]),v._v(" "),a("li",[v._v("哨兵标记：\n"),a("ol",[a("li",[v._v("每次 forward 指针移动的时候都需要去判断是否到了缓冲区的末尾，如果是，那么必须加载另一个缓冲区，因此，每读入一个字符就是要做2次测试，")]),v._v(" "),a("li",[v._v("如果我们扩展缓冲区（在末尾添加一个“哨兵”字符一般是eof），这样就可以把字符测试和缓冲区末端测试合二为一")])])])]),v._v(" "),a("p",[v._v("作为构造词法分析器的一个中间步骤，我们首先将模式转换成具有特定风格的流图。成为“状态转换图”")]),v._v(" "),a("p",[v._v("词法单元的状态转换图")]),v._v(" "),a("p",[a("img",{attrs:{src:t(438),alt:"词法单元的状态转换图"}})]),v._v(" "),a("h3",{attrs:{id:"自动机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动机"}},[v._v("#")]),v._v(" 自动机")]),v._v(" "),a("p",[a("strong",[v._v("正则表达式")]),v._v(" 是一种描述词素模式的重要表示方法，虽然不能表达出所有可能的模式，但是可以有效的描述词法单元要用到的模式类型。")]),v._v(" "),a("p",[v._v("从正则表达式到自动机：自动机就是一个算法")]),v._v(" "),a("ul",[a("li",[v._v("有穷自动机（FA）：将程序变成词法分析器，识别的是正则语言")]),v._v(" "),a("li",[v._v("确定性有穷自动机（DFA）：自动机的每个状态都有对字母表中所有符号的转移。")]),v._v(" "),a("li",[v._v("非确定性有穷自动机（NFA）：自动机的状态对字母表中的每个符号可以有也可以没有转移，对一个符号甚至可以有多个转移。")])]),v._v(" "),a("h3",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[v._v("#")]),v._v(" 作用域")]),v._v(" "),a("p",[v._v("作用域是非常重要的：因为在程序的不同部分，可能会出于不同的目的而多次声明相同的标识符。")]),v._v(" "),a("p",[a("img",{attrs:{src:t(439),alt:"作用域链"}})]),v._v(" "),a("h3",{attrs:{id:"第三章看完-136页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三章看完-136页"}},[v._v("#")]),v._v(" 第三章看完 （136页）")]),v._v(" "),a("p",[v._v("有点像看天书。明年再看")])])}),[],!1,null,null,null);_.default=s.exports}}]);