(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{434:function(e,a,t){e.exports=t.p+"assets/img/hot_loader.6949d4b0.jpg"},576:function(e,a,t){"use strict";t.r(a);var s=t(54),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"webpack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),s("blockquote",[s("p",[e._v("webpack 最出色的功能之一就是，除了 "),s("code",[e._v("JavaScript")]),e._v("，还可以通过 "),s("code",[e._v("loader")]),e._v(" 引入"),s("strong",[e._v("任何其他类型的文件")]),e._v("。")])]),e._v(" "),s("h3",{attrs:{id:"webpack-核心概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-核心概念"}},[e._v("#")]),e._v(" Webpack 核心概念：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("Entry")]),e._v("（入口）：Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。")]),e._v(" "),s("li",[s("code",[e._v("Output")]),e._v("（出口）：指示 webpack 如何去输出、以及在哪里输出")]),e._v(" "),s("li",[s("code",[e._v("Module")]),e._v("（模块）：在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。")]),e._v(" "),s("li",[s("code",[e._v("Chunk")]),e._v("（代码块）：一个 Chunk "),s("strong",[e._v("由多个模块组合而成")]),e._v("，用于代码合并与分割。")]),e._v(" "),s("li",[s("code",[e._v("Loader")]),e._v("（模块转换器）：用于把模块原内容按照需求转换成新内容。")]),e._v(" "),s("li",[s("code",[e._v("Plugin")]),e._v("（扩展插件）：在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件，并改变输出结果")])]),e._v(" "),s("h3",{attrs:{id:"配置项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置项"}},[e._v("#")]),e._v(" 配置项")]),e._v(" "),s("ol",[s("li",[e._v("入口 Entry")])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("entry"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  a"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"./app/entry-a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  b"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"./app/entry-b1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"./app/entry-b2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])])]),s("p",[e._v("多入口可以通过 "),s("code",[e._v("HtmlWebpackPlugin")]),e._v(" 分开注入")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("plugins"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HtmlWebpackPlugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    chunks"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    filename"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'test.html'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    template"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'src/assets/test.html'")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("出口 Output")])]),e._v(" "),s("p",[e._v("修改路径相关")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("publicPath")]),e._v("：并不会对生成文件的目录造成影响，主要是对你的页面里面引入的资源的路径做对应的补全")]),e._v(" "),s("li",[s("code",[e._v("filename")]),e._v("：能修改文件名，也能更改文件目录")])]),e._v(" "),s("p",[e._v("导出库相关")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("library")]),e._v(": 导出库的名称")]),e._v(" "),s("li",[s("code",[e._v("libraryTarget")]),e._v(": 通用模板定义方式")])]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("模块 Module")])]),e._v(" "),s("p",[e._v("webpack 一切皆模块，配置项 Module，定义模块的各种操作，")]),e._v(" "),s("p",[e._v("Module 主要配置：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("loader")]),e._v("： 各种模块转换器")]),e._v(" "),s("li",[s("code",[e._v("extensions")]),e._v("：使用的扩展名")]),e._v(" "),s("li",[s("code",[e._v("alias")]),e._v("：别名、例如：vue-cli 常用的 "),s("code",[e._v("@")]),e._v(" 出自此处")])]),e._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[e._v("其他")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("plugins")]),e._v(": 插件列表")]),e._v(" "),s("li",[s("code",[e._v("devServer")]),e._v("：开发环境相关配置，譬如 "),s("code",[e._v("proxy")])]),e._v(" "),s("li",[s("code",[e._v("externals")]),e._v("：打包排除模块")]),e._v(" "),s("li",[s("code",[e._v("target")]),e._v("：包应该运行的环境，默认 "),s("code",[e._v("web")])])]),e._v(" "),s("h3",{attrs:{id:"webpack-执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-执行流程"}},[e._v("#")]),e._v(" Webpack 执行流程")]),e._v(" "),s("p",[e._v("webpack从启动到结束会依次执行以下流程：")]),e._v(" "),s("ol",[s("li",[e._v("初始化：解析webpack配置参数，生产 "),s("code",[e._v("Compiler")]),e._v(" 实例")]),e._v(" "),s("li",[e._v("注册插件：调用插件的"),s("code",[e._v("apply")]),e._v("方法，给插件传入"),s("code",[e._v("compiler")]),e._v("实例的引用，插件通过compiler调用Webpack提供的API，让插件可以监听后续的所有事件节点。")]),e._v(" "),s("li",[e._v("入口：读取入口文件")]),e._v(" "),s("li",[e._v("解析文件：使用"),s("code",[e._v("loader")]),e._v("将文件解析成抽象语法树 "),s("code",[e._v("AST")])]),e._v(" "),s("li",[e._v("生成依赖图谱：找出每个文件的依赖项（遍历）")]),e._v(" "),s("li",[e._v("输出：根据转换好的代码，生成 "),s("code",[e._v("chunk")])]),e._v(" "),s("li",[e._v("生成最后打包的文件")])]),e._v(" "),s("p",[e._v("ps：由于 webpack 是根据依赖图动态加载所有的依赖项，所以，每个模块都可以明确表述自身的依赖，可以避免打包未使用的模块。")]),e._v(" "),s("h3",{attrs:{id:"babel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#babel"}},[e._v("#")]),e._v(" Babel")]),e._v(" "),s("p",[e._v("Babel 是一个工具链，主要用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 "),s("code",[e._v("JavaScript")]),e._v(" 语法，以便能够运行在当前和旧版本的浏览器或其他环境中：")]),e._v(" "),s("blockquote",[s("p",[e._v("Babel 内部所使用的语法解析器是 Babylon")])]),e._v(" "),s("p",[e._v("主要功能")]),e._v(" "),s("ul",[s("li",[e._v("语法转换")]),e._v(" "),s("li",[e._v("通过 "),s("code",[e._v("Polyfill")]),e._v(" 方式在目标环境中添加缺失的特性 (通过 "),s("code",[e._v("@babel/polyfill")]),e._v(" 模块)")]),e._v(" "),s("li",[e._v("源码转换 ("),s("code",[e._v("codemods")]),e._v(")")])]),e._v(" "),s("p",[e._v("主要模块")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("@babel/parser")]),e._v("：负责将代码解析为抽象语法树")]),e._v(" "),s("li",[s("code",[e._v("@babel/traverse")]),e._v("：遍历抽象语法树的工具，我们可以在语法树中解析特定的节点，然后做一些操作")]),e._v(" "),s("li",[s("code",[e._v("@babel/core")]),e._v("：代码转换，如ES6的代码转为ES5的模式")])]),e._v(" "),s("h3",{attrs:{id:"webpack-打包结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-打包结果"}},[e._v("#")]),e._v(" Webpack 打包结果")]),e._v(" "),s("p",[e._v("在使用 webpack 构建的典型应用程序或站点中，有三种主要的代码类型：")]),e._v(" "),s("ol",[s("li",[e._v("源码：你或你的团队编写的源码。")]),e._v(" "),s("li",[e._v("依赖：你的源码会依赖的任何第三方的 "),s("code",[e._v("library")]),e._v(' 或 "'),s("code",[e._v("vendor")]),e._v('" 代码。')]),e._v(" "),s("li",[e._v("管理文件："),s("code",[e._v("webpack")]),e._v(" 的 "),s("code",[e._v("runtime")]),e._v(" 使用 "),s("code",[e._v("manifest")]),e._v(" 管理所有模块的交互。")])]),e._v(" "),s("p",[s("code",[e._v("runtime")]),e._v("：在模块交互时，连接模块所需的"),s("strong",[e._v("加载和解析逻辑")]),e._v("。包括浏览器中的已加载模块的连接，以及懒加载模块的执行逻辑。")]),e._v(" "),s("p",[s("code",[e._v("manifest")]),e._v('：当编译器(compiler)开始执行、解析和映射应用程序时，它会保留所有模块的详细要点。这个数据集合称为 "Manifest"，\n当完成打包并发送到浏览器时，会在运行时通过 Manifest 来解析和加载模块。无论你选择哪种模块语法，那些 import 或 require 语句现在都已经转换为 '),s("strong",[e._v("webpack_require")]),e._v(" 方法，此方法指向模块标识符(module identifier)。通过使用 manifest 中的数据，runtime 将能够查询模块标识符，检索出背后对应的模块。")]),e._v(" "),s("p",[e._v("其中：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("import")]),e._v(" 或 "),s("code",[e._v("require")]),e._v(" 语句会转换为 "),s("code",[e._v("__webpack_require__")])]),e._v(" "),s("li",[e._v("异步导入会转换为 "),s("code",[e._v("require.ensure")]),e._v("（在Webpack 4 中会使用 Promise 封装）")])]),e._v(" "),s("h3",{attrs:{id:"比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[e._v("#")]),e._v(" 比较")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("gulp")]),e._v(" 是任务执行器(task runner)：就是用来自动化处理常见的开发任务，例如项目的检查(lint)、构建(build)、测试(test)")]),e._v(" "),s("li",[s("code",[e._v("webpack")]),e._v(" 是打包器(bundler)：帮助你取得准备用于部署的 JavaScript 和样式表，将它们转换为适合浏览器的可用格式。例如，JavaScript 可以压缩、拆分 chunk 和懒加载，")])]),e._v(" "),s("h3",{attrs:{id:"实现一个-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现一个-loader"}},[e._v("#")]),e._v(" 实现一个 loader")]),e._v(" "),s("p",[s("code",[e._v("loader")]),e._v(" 就是一个js文件，它导出了一个返回了一个 "),s("code",[e._v("buffer")]),e._v(" 或者 "),s("code",[e._v("string")]),e._v(" 的函数;")]),e._v(" "),s("p",[e._v("譬如:")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// log-loader.js")]),e._v("\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("exports")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("source")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'test...'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" source\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("在 use 时，如果 "),s("code",[e._v("log-loader")]),e._v(" 并没有在 "),s("code",[e._v("node_modules")]),e._v(" 中，那么可以使用路径导入。")]),e._v(" "),s("h3",{attrs:{id:"实现一个-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现一个-plugin"}},[e._v("#")]),e._v(" 实现一个 plugin")]),e._v(" "),s("p",[e._v("plugin： 是一个含有 "),s("code",[e._v("apply")]),e._v(" 方法的 "),s("code",[e._v("类")]),e._v("。")]),e._v(" "),s("p",[e._v("譬如：")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("DemoWebpackPlugin")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("constructor")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'初始化 插件'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apply")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("compiler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" DemoWebpackPlugin\n")])])]),s("p",[e._v("apply 方法中接收一个 "),s("code",[e._v("compiler")]),e._v(" 参数，也就是 webpack实例。由于该参数的存在 plugin 可以很好的运用 webpack 的生命周期钩子，在不同的时间节点做一些操作。")]),e._v(" "),s("h3",{attrs:{id:"webpack-优化概况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-优化概况"}},[e._v("#")]),e._v(" Webpack 优化概况")]),e._v(" "),s("p",[e._v("Webpack 加快打包速度的方法")]),e._v(" "),s("ol",[s("li",[e._v("使用 "),s("code",[e._v("include")]),e._v(" 或 "),s("code",[e._v("exclude")]),e._v(" 加快文件查找速度")]),e._v(" "),s("li",[e._v("使用 "),s("code",[e._v("HappyPack")]),e._v(" 开启多进程 "),s("code",[e._v("Loader")]),e._v(" 转换")]),e._v(" "),s("li",[e._v("使用 "),s("code",[e._v("ParallelUglifyPlugin")]),e._v(" 开启多进程 JS 压缩")]),e._v(" "),s("li",[e._v("使用 "),s("code",[e._v("DllPlugin")]),e._v(" + "),s("code",[e._v("DllReferencePlugin")]),e._v(" 分离打包\n"),s("ol",[s("li",[e._v("将 "),s("code",[e._v("库")]),e._v(" 和 "),s("code",[e._v("项目代码")]),e._v(" 分离打包")]),e._v(" "),s("li",[e._v("需要 dll 映射文件")])])]),e._v(" "),s("li",[e._v("配置缓存（插件自带 loader，不支持的可以用 "),s("code",[e._v("cache-loader")]),e._v("）")])]),e._v(" "),s("p",[e._v("Webpack 加快代码运行速度方法")]),e._v(" "),s("ol",[s("li",[e._v("代码压缩")]),e._v(" "),s("li",[e._v("抽离公共模块")]),e._v(" "),s("li",[e._v("懒加载模块")]),e._v(" "),s("li",[e._v("将小图片转成 base64 以减少请求")]),e._v(" "),s("li",[e._v("预取("),s("code",[e._v("prefetch")]),e._v(") || 预加载("),s("code",[e._v("preload")]),e._v(")")]),e._v(" "),s("li",[e._v("精灵图")]),e._v(" "),s("li",[s("code",[e._v("webpack-bundle-analyzer")]),e._v(" 代码分析")])]),e._v(" "),s("h3",{attrs:{id:"webpack-优化细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-优化细节"}},[e._v("#")]),e._v(" Webpack 优化细节")]),e._v(" "),s("h3",{attrs:{id:"webpack-4-6-0-增加了对预取和预加载的支持。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-4-6-0-增加了对预取和预加载的支持。"}},[e._v("#")]),e._v(" webpack 4.6.0+增加了对预取和预加载的支持。")]),e._v(" "),s("p",[e._v("动态导入")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  import(/* webpackChunkName: \"lodash\" */ 'lodash')\n\n  // 注释中的使用webpackChunkName。\n  // 这将导致我们单独的包被命名，lodash.bundle.js\n  // 而不是just [id].bundle.js。\n")])])]),s("p",[e._v("预取("),s("code",[e._v("prefetch")]),e._v(")：将来可能需要一些导航资源")]),e._v(" "),s("ul",[s("li",[e._v("只要父"),s("code",[e._v("chunk")]),e._v("加载完成，"),s("code",[e._v("webpack")]),e._v("就会添加 "),s("code",[e._v("prefetch")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  import(/* webpackPrefetch: true */ \'LoginModal\');\n\n  // 将<link rel="prefetch" href="login-modal-chunk.js">其附加在页面的开头\n')])])]),s("p",[e._v("预加载("),s("code",[e._v("preload")]),e._v(")：当前导航期间可能需要资源")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("preload")]),e._v(" chunk 会在父 chunk 加载时，以并行方式开始加载")]),e._v(" "),s("li",[e._v("不正确地使用 "),s("code",[e._v("webpackPreload")]),e._v(" 会有损性能，")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  import(/* webpackPreload: true */ 'ChartingLibrary');\n\n  // 在加载父 chunk 的同时\n  // 还会通过 <link rel=\"preload\"> 请求 charting-library-chunk\n")])])]),s("h5",{attrs:{id:"dllplugin-dllreferenceplugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dllplugin-dllreferenceplugin"}},[e._v("#")]),e._v(" DllPlugin + DllReferencePlugin")]),e._v(" "),s("p",[e._v("为了极大减少构建时间，进行分离打包。")]),e._v(" "),s("p",[e._v("DllReferencePlugin 和 DLL插件DllPlugin 都是在_另外_的 webpack 设置中使用的。")]),e._v(" "),s("p",[s("code",[e._v("DllPlugin")]),e._v("这个插件是在一个额外的独立的 webpack 设置中创建一个只有 dll 的 bundle(dll-only-bundle)。 这个插件会生成一个名为 manifest.json 的文件，这个文件是用来让 "),s("code",[e._v("DLLReferencePlugin")]),e._v(" 映射到相关的依赖上去的。")]),e._v(" "),s("p",[e._v("webpack.vendor.config.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  new webpack.DllPlugin({\n    context: __dirname,\n    name: "[name]_[hash]",\n    path: path.join(__dirname, "manifest.json"),\n  })\n')])])]),s("p",[e._v("webpack.app.config.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  new webpack.DllReferencePlugin({\n    context: __dirname,\n    manifest: require("./manifest.json"),\n    name: "./my-dll.js",\n    scope: "xyz",\n    sourceType: "commonjs2"\n  })\n')])])]),s("p",[e._v("ps：这个webpack自带的dll其实可以用 "),s("a",{attrs:{href:"https://www.npmjs.com/package/autodll-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("autodll-webpack-plugin"),s("OutboundLink")],1),e._v(" 来代替的。")]),e._v(" "),s("h5",{attrs:{id:"commonschunkplugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonschunkplugin"}},[e._v("#")]),e._v(" CommonsChunkPlugin")]),e._v(" "),s("p",[e._v("通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存到缓存中供后续使用。这个带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件。")]),e._v(" "),s("p",[e._v("如果把公共文件提取出一个文件，那么当用户访问了一个网页，加载了这个公共文件，再访问其他依赖公共文件的网页时，就直接使用文件在浏览器的缓存，这样公共文件就只用被传输一次。")]),e._v(" "),s("p",[e._v("ps： 在 webpack4.0 后删除了"),s("code",[e._v("CommonsChunkPlugin")]),e._v("，新增了优化后的"),s("code",[e._v("SplitChunksPlugin")]),e._v("，")]),e._v(" "),s("h5",{attrs:{id:"uglifyjsplugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uglifyjsplugin"}},[e._v("#")]),e._v(" UglifyJSPlugin")]),e._v(" "),s("p",[e._v("基本上脚手架都包含了该插件,该插件会分析JS代码语法树，理解代码的含义，从而做到去掉无效代码、去掉日志输入代码、缩短变量名等优化。")]),e._v(" "),s("h5",{attrs:{id:"extracttextplugin-purifycssplugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extracttextplugin-purifycssplugin"}},[e._v("#")]),e._v(" ExtractTextPlugin + PurifyCSSPlugin")]),e._v(" "),s("p",[e._v("ExtractTextPlugin 从 bundle 中提取文本（CSS）到单独的文件，PurifyCSSPlugin纯化CSS（其实用处没多大）")]),e._v(" "),s("h5",{attrs:{id:"defineplugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#defineplugin"}},[e._v("#")]),e._v(" DefinePlugin")]),e._v(" "),s("blockquote",[s("p",[e._v("DefinePlugin能够自动检测环境变化，效率高效。")])]),e._v(" "),s("p",[e._v("在前端开发中，在不同的应用环境中，需要不同的配置。如：开发环境的API Mocker、测试流程中的数据伪造、打印调试信息。如果使用人工处理这些配置信息，不仅麻烦，而且容易出错。")]),e._v(" "),s("p",[e._v("使用"),s("code",[e._v("DefinePlugin")]),e._v("配置的全局常量")]),e._v(" "),s("p",[e._v("注意，因为这个插件直接执行文本替换，给定的值必须包含字符串本身内的实际引号。通常，有两种方式来达到这个效果，使用 "),s("code",[e._v("' \"production\" '")]),e._v(", 或者使用 "),s("code",[e._v("JSON.stringify('production')")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    new webpack.DefinePlugin({\n\n        // 当然，在运行node服务器的时候就应该按环境来配置文件\n        // 下面模拟的测试环境运行配置\n\n        'process.env':JSON.stringify('dev'),\n        WP_CONF: JSON.stringify('dev'),\n    }),\n")])])]),s("h5",{attrs:{id:"清除不可达代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清除不可达代码"}},[e._v("#")]),e._v(" 清除不可达代码")]),e._v(" "),s("p",[e._v("当使用了"),s("code",[e._v("DefinePlugin")]),e._v("插件后，打包后的代码会有很多冗余。可以通过"),s("code",[e._v("UglifyJsPlugin")]),s("strong",[e._v("清除不可达代码")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    [\n        new UglifyJsPlugin({\n            uglifyOptions: {\n            compress: {\n                warnings: false, // 去除warning警告\n                dead_code: true, // 去除不可达代码\n            },\n            warnings: false\n            }\n        })\n    ]\n")])])]),s("p",[e._v("最后的打包打包代码会变成"),s("code",[e._v("console.log('This is prod')")])]),e._v(" "),s("p",[e._v("附Uglify文档：https://github.com/mishoo/UglifyJS2")]),e._v(" "),s("p",[e._v("使用DefinePlugin区分环境 + UglifyJsPlugin清除不可达代码，以减轻打包代码体积")]),e._v(" "),s("h5",{attrs:{id:"happypack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#happypack"}},[e._v("#")]),e._v(" HappyPack")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/amireh/happypack",target:"_blank",rel:"noopener noreferrer"}},[e._v("HappyPack"),s("OutboundLink")],1),e._v("可以"),s("strong",[e._v("开启多进程Loader转换")]),e._v("，将任务分解给多个子进程，最后将结果发给主进程。")]),e._v(" "),s("p",[e._v("使用")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  exports.plugins = [\n    new HappyPack({\n      id: 'jsx',\n      threads: 4,\n      loaders: [ 'babel-loader' ]\n    }),\n\n    new HappyPack({\n      id: 'styles',\n      threads: 2,\n      loaders: [ 'style-loader', 'css-loader', 'less-loader' ]\n    })\n  ];\n\n  exports.module.rules = [\n    {\n      test: /\\.js$/,\n      use: 'happypack/loader?id=jsx'\n    },\n\n    {\n      test: /\\.less$/,\n      use: 'happypack/loader?id=styles'\n    },\n  ]\n")])])]),s("p",[e._v("ps：webpack4官方提供了 thread-loader")]),e._v(" "),s("h5",{attrs:{id:"paralleluglifyplugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#paralleluglifyplugin"}},[e._v("#")]),e._v(" ParallelUglifyPlugin")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/gdborton/webpack-parallel-uglify-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("ParallelUglifyPlugin"),s("OutboundLink")],1),e._v("可以"),s("strong",[e._v("开启多进程压缩JS文件")])]),e._v(" "),s("p",[e._v("ps： 其实有了上面的，这个也没啥用了。")]),e._v(" "),s("h5",{attrs:{id:"bundleanalyzerplugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bundleanalyzerplugin"}},[e._v("#")]),e._v(" BundleAnalyzerPlugin")]),e._v(" "),s("p",[e._v("webpack打包结果分析插件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n \n  module.exports = {\n    plugins: [\n      new BundleAnalyzerPlugin()\n    ]\n  }\n")])])]),s("h5",{attrs:{id:"test-include-exclude"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-include-exclude"}},[e._v("#")]),e._v(" test & include & exclude")]),e._v(" "),s("p",[e._v("减小文件搜索范围，从而提升速度")]),e._v(" "),s("p",[e._v("示例")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  {\n    test: /\\.css$/,\n    include: [\n      path.resolve(__dirname, "app/styles"),\n      path.resolve(__dirname, "vendor/styles")\n    ]\n  }\n')])])]),s("h5",{attrs:{id:"外部扩展-externals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外部扩展-externals"}},[e._v("#")]),e._v(" 外部扩展(externals)")]),e._v(" "),s("p",[e._v("这玩意不是插件，是wenpack的配置选项")]),e._v(" "),s("p",[e._v("externals 配置选项提供了「从输出的 bundle 中排除依赖」的方法。相反，所创建的 bundle 依赖于那些存在于用户环境(consumer's environment)中的依赖。此功能通常对 library 开发人员来说是最有用的，然而也会有各种各样的应用程序用到它。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  entry: {\n    entry: './src/main.js',\n    vendor: ['vue', 'vue-router', 'vuex']\n  },\n  externals: {\n    // 从输出的 bundle 中排除 echarts 依赖\n    echarts: 'echarts',\n  }\n")])])]),s("h5",{attrs:{id:"hard-source-webpack-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hard-source-webpack-plugin"}},[e._v("#")]),e._v(" hard-source-webpack-plugin")]),e._v(" "),s("p",[e._v("vue-cli 和 create-react-app 使用了 "),s("a",{attrs:{href:"https://www.npmjs.com/package/hard-source-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("hard-source-webpack-plugin"),s("OutboundLink")],1),e._v(" 来优化。")]),e._v(" "),s("p",[e._v("该插件为模块提供中间缓存步骤。")]),e._v(" "),s("h3",{attrs:{id:"webpack-hmr-原理解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-hmr-原理解析"}},[e._v("#")]),e._v(" Webpack HMR 原理解析")]),e._v(" "),s("blockquote",[s("p",[e._v("Hot Module Replacement（简称 HMR)")])]),e._v(" "),s("p",[e._v("包含以下内容：")]),e._v(" "),s("ol",[s("li",[e._v("热更新图")]),e._v(" "),s("li",[e._v("热更新步骤讲解")])]),e._v(" "),s("p",[e._v("热更新内容参考"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/ElemeFE",target:"_blank",rel:"noopener noreferrer"}},[e._v("饿了么专栏"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("img",{attrs:{src:t(434),alt:"热更新"}})]),e._v(" "),s("h5",{attrs:{id:"第一步-webpack-对文件系统进行-watch-打包到内存中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一步-webpack-对文件系统进行-watch-打包到内存中"}},[e._v("#")]),e._v(" 第一步：webpack 对文件系统进行 watch 打包到内存中")]),e._v(" "),s("p",[e._v("webpack-dev-middleware 调用 webpack 的 api 对文件系统 watch，当文件发生改变后，webpack 重新对文件进行编译打包，然后保存到内存中。")]),e._v(" "),s("p",[e._v("webpack 将 bundle.js 文件打包到了内存中，不生成文件的原因就在于访问内存中的代码比访问文件系统中的文件更快，而且也减少了代码写入文件的开销。")]),e._v(" "),s("p",[e._v("这一切都归功于"),s("a",{attrs:{href:"https://github.com/webpack/memory-fs",target:"_blank",rel:"noopener noreferrer"}},[e._v("memory-fs"),s("OutboundLink")],1),e._v("，memory-fs 是 webpack-dev-middleware 的一个依赖库，webpack-dev-middleware 将 webpack 原本的 outputFileSystem 替换成了MemoryFileSystem 实例，这样代码就将输出到内存中。")]),e._v(" "),s("p",[e._v("webpack-dev-middleware 中该部分源码如下:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  // compiler\n  // webpack-dev-middleware/lib/Shared.js\n  var isMemoryFs = !compiler.compilers &&\n                  compiler.outputFileSystem instanceof MemoryFileSystem;\n  if(isMemoryFs) {\n      fs = compiler.outputFileSystem;\n  } else {\n      fs = compiler.outputFileSystem = new MemoryFileSystem();\n  }\n")])])]),s("h5",{attrs:{id:"第二步-devserver-通知浏览器端文件发生改变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二步-devserver-通知浏览器端文件发生改变"}},[e._v("#")]),e._v(" 第二步：devServer 通知浏览器端文件发生改变")]),e._v(" "),s("p",[e._v("在启动 devServer 的时候，"),s("a",{attrs:{href:"(https://github.com/sockjs/sockjs-client)"}},[e._v("sockjs")]),e._v(" 在服务端和浏览器端建立了一个 webSocket 长连接，以便将 webpack 编译和打包的各个阶段状态告知浏览器，最关键的步骤还是 webpack-dev-server 调用 webpack api 监听 compile的 done 事件，当compile 完成后，webpack-dev-server通过 _sendStatus 方法将编译打包后的新模块 hash 值发送到浏览器端。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  // webpack-dev-server/lib/Server.js\n  compiler.plugin('done', (stats) => {\n    // stats.hash 是最新打包文件的 hash 值\n    this._sendStats(this.sockets, stats.toJson(clientStats));\n    this._stats = stats;\n  });\n  ...\n  Server.prototype._sendStats = function (sockets, stats, force) {\n    if (!force && stats &&\n    (!stats.errors || stats.errors.length === 0) && stats.assets &&\n    stats.assets.every(asset => !asset.emitted)\n    ) { return this.sockWrite(sockets, 'still-ok'); }\n    // 调用 sockWrite 方法将 hash 值通过 websocket 发送到浏览器端\n    this.sockWrite(sockets, 'hash', stats.hash);\n    if (stats.errors.length > 0) { this.sockWrite(sockets, 'errors', stats.errors); } \n    else if (stats.warnings.length > 0) { this.sockWrite(sockets, 'warnings', stats.warnings); }      else { this.sockWrite(sockets, 'ok'); }\n  };\n")])])]),s("h5",{attrs:{id:"第三步-webpack-dev-server-client-接收到服务端消息做出响应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三步-webpack-dev-server-client-接收到服务端消息做出响应"}},[e._v("#")]),e._v(" 第三步：webpack-dev-server/client 接收到服务端消息做出响应")]),e._v(" "),s("p",[e._v("webpack-dev-server 修改了webpack 配置中的 entry 属性，在里面添加了 webpack-dev-client 的代码，这样在最后的 bundle.js 文件中就会接收 websocket 消息的代码了。")]),e._v(" "),s("p",[e._v("webpack-dev-server/client 当接收到 type 为 hash 消息后会将 hash 值暂存起来，当接收到 type 为 ok 的消息后对应用执行 reload 操作。")]),e._v(" "),s("p",[e._v("在 reload 操作中，webpack-dev-server/client 会根据 hot 配置决定是刷新浏览器还是对代码进行热更新（HMR）。代码如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  // webpack-dev-server/client/index.js\n  hash: function msgHash(hash) {\n      currentHash = hash;\n  },\n  ok: function msgOk() {\n      // ...\n      reloadApp();\n  },\n  // ...\n  function reloadApp() {\n    // ...\n    if (hot) {\n      log.info('[WDS] App hot update...');\n      const hotEmitter = require('webpack/hot/emitter');\n      hotEmitter.emit('webpackHotUpdate', currentHash);\n      // ...\n    } else {\n      log.info('[WDS] App updated. Reloading...');\n      self.location.reload();\n    }\n  }\n")])])]),s("h5",{attrs:{id:"第四步-webpack-接收到最新-hash-值验证并请求模块代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四步-webpack-接收到最新-hash-值验证并请求模块代码"}},[e._v("#")]),e._v(" 第四步：webpack 接收到最新 hash 值验证并请求模块代码")]),e._v(" "),s("p",[e._v("首先 webpack/hot/dev-server（以下简称 dev-server） 监听第三步 webpack-dev-server/client 发送的 "),s("code",[e._v("webpackHotUpdate")]),e._v(" 消息，调用 webpack/lib/HotModuleReplacement.runtime（简称 HMR runtime）中的 check 方法，检测是否有新的更新。")]),e._v(" "),s("p",[e._v("在 check 过程中会利用 webpack/lib/JsonpMainTemplate.runtime（简称 jsonp runtime）中的两个方法 hotDownloadManifest 和 hotDownloadUpdateChunk。")]),e._v(" "),s("p",[e._v("hotDownloadManifest 是调用 AJAX 向服务端请求是否有更新的文件，如果有将发更新的文件列表返回浏览器端。该方法返回的是最新的 hash 值。")]),e._v(" "),s("p",[e._v("hotDownloadUpdateChunk 是通过 jsonp 请求最新的模块代码，然后将代码返回给 HMR runtime，HMR runtime 会根据返回的新模块代码做进一步处理，可能是刷新页面，也可能是对模块进行热更新。该 方法返回的就是最新 hash 值对应的代码块。")]),e._v(" "),s("p",[e._v("最后将新的代码块返回给 HMR runtime，进行模块热更新。")]),e._v(" "),s("p",[e._v("附：为什么更新模块的代码不直接在第三步通过 websocket 发送到浏览器端，而是通过 jsonp 来获取呢？")]),e._v(" "),s("p",[e._v("我的理解是，功能块的解耦，各个模块各司其职，dev-server/client 只负责消息的传递而不负责新模块的获取，而这些工作应该有 HMR runtime 来完成，HMR runtime 才应该是获取新代码的地方。再就是因为不使用 webpack-dev-server 的前提，使用 webpack-hot-middleware 和 webpack 配合也可以完成模块热更新流程，在使用 webpack-hot-middleware 中有件有意思的事，它没有使用 websocket，而是使用的 EventSource。综上所述，HMR 的工作流中，不应该把新模块代码放在 websocket 消息中。")]),e._v(" "),s("h5",{attrs:{id:"第五步-hotmodulereplacement-runtime-对模块进行热更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五步-hotmodulereplacement-runtime-对模块进行热更新"}},[e._v("#")]),e._v(" 第五步：HotModuleReplacement.runtime 对模块进行热更新")]),e._v(" "),s("p",[e._v("这一步是整个模块热更新（HMR）的关键步骤，而且模块热更新都是发生在HMR runtime 中的 hotApply 方法中")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  // webpack/lib/HotModuleReplacement.runtime\n  function hotApply() {\n      // ...\n      var idx;\n      var queue = outdatedModules.slice();\n      while(queue.length > 0) {\n          moduleId = queue.pop();\n          module = installedModules[moduleId];\n          // ...\n          // remove module from cache\n          delete installedModules[moduleId];\n          // when disposing there is no need to call dispose handler\n          delete outdatedDependencies[moduleId];\n          // remove "parents" references from all children\n          for(j = 0; j < module.children.length; j++) {\n              var child = installedModules[module.children[j]];\n              if(!child) continue;\n              idx = child.parents.indexOf(moduleId);\n              if(idx >= 0) {\n                  child.parents.splice(idx, 1);\n              }\n          }\n      }\n      // ...\n      // insert new code\n      for(moduleId in appliedUpdate) {\n          if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {\n              modules[moduleId] = appliedUpdate[moduleId];\n          }\n      }\n      // ...\n  }\n')])])]),s("p",[e._v("模块热更新的错误处理，如果在热更新过程中出现错误，热更新将回退到刷新浏览器，这部分代码在 dev-server 代码中，简要代码如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  module.hot.check(true).then(function(updatedModules) {\n    if(!updatedModules) {\n        return window.location.reload();\n    }\n    // ...\n  }).catch(function(err) {\n      var status = module.hot.status();\n      if(["abort", "fail"].indexOf(status) >= 0) {\n          window.location.reload();\n      }\n  });\n')])])]),s("h5",{attrs:{id:"第六步-业务代码需要做些什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第六步-业务代码需要做些什么"}},[e._v("#")]),e._v(" 第六步：业务代码需要做些什么？")]),e._v(" "),s("p",[e._v("当用新的模块代码替换老的模块后，但是我们的业务代码并不能知道代码已经发生变化，也就是说，当 hello.js 文件修改后，我们需要在 index.js 文件中调用 HMR 的 accept 方法，添加模块更新后的处理函数，及时将 hello 方法的返回值插入到页面中。代码如下")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  // index.js\n  if(module.hot) {\n      module.hot.accept('./hello.js', function() {\n          div.innerHTML = hello()\n      })\n  }\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);