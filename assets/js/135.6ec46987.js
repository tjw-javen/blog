(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{580:function(n,e,t){"use strict";t.r(e);var a=t(54),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"js-设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-设计模式"}},[n._v("#")]),n._v(" JS 设计模式")]),n._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/book/6844733790204461070/section/6844733790246404109",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考-掘金设计模式"),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("面向对象思想：封装、继承、多态")]),n._v(" "),t("h3",{attrs:{id:"构造器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造器模式"}},[n._v("#")]),n._v(" 构造器模式")]),n._v(" "),t("blockquote",[t("p",[n._v("无非就是继承来实现的啦 - -!")])]),n._v(" "),t("p",[n._v("构造器模式案例省略...")]),n._v(" "),t("p",[n._v("思考：为什么ES5的继承要写在 "),t("code",[n._v("prototype")]),n._v(" 中，而不是直接写在构造方法里？")]),n._v(" "),t("p",[n._v("答：写在构造器中，无法做到数据共享（会造成资源浪费）")]),n._v(" "),t("ul",[t("li",[n._v("所以 "),t("code",[n._v("prototype")]),n._v(" 中会存放需要共享数据的方法和属性（基本上都是方法）")]),n._v(" "),t("li",[n._v("而构造器中会存放不需要共享的属性和方法")])]),n._v(" "),t("h3",{attrs:{id:"模块化模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化模式"}},[n._v("#")]),n._v(" 模块化模式")]),n._v(" "),t("blockquote",[t("p",[n._v("模块化嘛：AUCommonJS/Module 都是模块化，对象、闭包也是模块化")])]),n._v(" "),t("p",[n._v('在JS中，模块化模式其实是模拟了"类"的概念。好处是有私密空间，不会造成全局污染。')]),n._v(" "),t("p",[n._v("虽然JS没有私有属性。但"),t("strong",[n._v("闭包能很好的实现私有属性的概念")])]),n._v(" "),t("p",[n._v("简单的模块化模式：（闭包 - -.!）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var module = (function () {\n        var num = 0;\n\n        return {\n            getNum: function () {\n                return num;\n            },\n            addNum: function () {\n                return num++;\n            }\n        };\n\n    })();\n\n    console.log(module)\n    \n    module.addNum()\n\n    console.log(module.getNum())\n")])])]),t("h3",{attrs:{id:"单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[n._v("#")]),n._v(" 单例模式")]),n._v(" "),t("blockquote",[t("p",[n._v("单例：就是限制一个类只能有一个实例化对象")])]),n._v(" "),t("p",[n._v("使用场景案例：“警告/确认/提示弹窗”（只能存在一个的情况）")]),n._v(" "),t("p",[n._v("最简单的单例：：闭包 + Flag 来实现")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const mySingleton = (function () {\n        let _instance;\n\n        return function () {\n            if (!_instance) {\n                _instance = {\n                    x: 1,\n                    setX: (arg) => {\n                        _instance.x = arg;\n                    }\n                };\n            }\n            return _instance;\n        }\n        \n    })()\n\n    const instanceA = mySingleton();\n    const instanceB = mySingleton();\n\n    console.log(instanceA === instanceB);\n")])])]),t("p",[n._v("封装一下：（PS: ES5的new如果有return使用return的值）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const Singleton = (function() {\n        var _instance;\n        return function(obj) {\n            return _instance || (_instance = obj);\n        }\n    })();\n\n    var a = new Singleton({x: 1});\n    var b = new Singleton({y: 2});\n\n    console.log(a === b);\n")])])]),t("h3",{attrs:{id:"观察者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[n._v("#")]),n._v(" 观察者模式")]),n._v(" "),t("blockquote",[t("p",[n._v("由观察者和观察者组成。通过观察者调用被观察者的实例。")])]),n._v(" "),t("p",[n._v("观察者模式：观察者对象和被观察者对象 之间的订阅和触发事件")]),n._v(" "),t("p",[n._v("使用场景案例：“Vue 双向绑定实现”")]),n._v(" "),t("p",[n._v("简单的观察者模式: （仿 "),t("code",[n._v("Vue")]),n._v(" 实现）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    // 观察者\n    class Dep {\n        constructor() {\n            this.subs = []\n        }\n        \n        addSub(sub) {\n            this.subs.push(sub)\n        }\n        \n        depend() {\n            if (Dep.target) { \n                Dep.target.addDep(this);\n            }\n        }\n        \n        notify() {\n            this.subs.forEach(sub => sub.update())\n        }\n    }\n    \n    // 被观察者\n    class Watcher {\n        constructor(vm, expOrFn) {\n            this.vm = vm;\n            this.getter = expOrFn;\n            this.value;\n        }\n\n        get() {\n            Dep.target = this;\n            \n            var vm = this.vm;\n            var value = this.getter.call(vm, vm);\n            return value;\n        }\n\n        evaluate() {\n            this.value = this.get();\n        }\n\n        addDep(dep) {\n            dep.addSub(this);\n        }\n        \n        update() {\n            console.log('更新, value:', this.value)\n        }\n    }\n    \n    // 观察者实例\n    var dep = new Dep();\n    \n    //  被观察者实例\n    var watcher = new Watcher({x: 1}, (val) => val);\n    watcher.evaluate();\n    \n    // 观察者监听被观察对象\n    dep.depend()\n    \n    dep.notify()\n")])])]),t("h3",{attrs:{id:"发布-订阅者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发布-订阅者模式"}},[n._v("#")]),n._v(" 发布/订阅者模式")]),n._v(" "),t("blockquote",[t("p",[n._v("由订阅者 Subscriber 和发布者 Publisher 组成。")])]),n._v(" "),t("p",[n._v("发布/订阅者模式：是观察者模式的变体，比观察者模式多了一个调度中心")]),n._v(" "),t("ul",[t("li",[n._v("发布者发布信息到调度中心")]),n._v(" "),t("li",[n._v("调度中心和订阅者直接完成订阅和触发事件事件")])]),n._v(" "),t("p",[n._v("使用场景案例：“DOM 的 addEventListener 事件”")]),n._v(" "),t("p",[n._v("一个简单的发布/订阅者模式实现：（仿 "),t("code",[n._v("EventBus")]),n._v(" 实现）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    // EventTarget 就是一个调度中心\n\n    class EventTarget {\n        constructor() {\n            this.dep = {}\n        }\n        \n        on(key, fn) {\n            this.dep[key] = fn;\n        }\n        \n        emit(key) {\n            typeof this.dep[key] === 'function' ? this.dep[key]() : ''\n        }\n    }\n    \n    let eventTarget = new EventTarget()\n    \n    eventTarget.on('click', function() {console.log(1)})\n    eventTarget.emit('click')\n")])])]),t("h3",{attrs:{id:"中介者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式"}},[n._v("#")]),n._v(" 中介者模式")]),n._v(" "),t("blockquote",[t("p",[n._v("中介：撮合多个卖家 和 多个买家")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    class Saler {\n        constructor(name, cost) {\n            this.name = name;\n            this.cost = cost;\n        }\n            \n        send() {\n            console.log(`${cost}元出售${name}`)\n        }\n    }\n    \n    class Agency {\n        constructor() {\n            this.cargos = []\n        }\n        \n        register(saler) {\n            this.cargos.push(saler);\n        }\n        \n        query(name) {\n            const matchCargos = this.cargos.filter(cargo => cargo && cargo.name === name);\n            if (matchCargos.length) {\n                console.log(`查询到正在出售的商品:${JSON.stringify(matchCargos)}`)\n            } else {\n                console.log(`没有${name}在出售`);\n            }\n        }\n    }\n    \n    let agency = new Agency();\n    \n    agency.query('cart');\n    \n    const cartA = new Saler('cart', '100');\n    const cartB = new Saler('cart', '300');\n    const house = new Saler('house', '500');\n\n    agency.register(cartA);\n    agency.register(cartB);\n    agency.register(house);\n    \n    agency.query('cart');\n    agency.query('house');\n    agency.query('ABC');\n")])])]),t("h3",{attrs:{id:"命令模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[n._v("#")]),n._v(" 命令模式")]),n._v(" "),t("blockquote",[t("p",[n._v("为方法的调用进行解耦")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const command = {\n        buy(name, cost) {\n            console.log(`购买${name}消费了${cost}元`)\n        },\n        sale(name, cost) {\n            console.log(`出售了${name}赚得${cost}元`)\n        },\n        say(name, cost) {\n            console.log(`这里${cost}元可以买到${name}`)\n        },\n        execute(fnName) {\n            const fn= this[fnName];\n            (typeof fn === 'function') && fn.apply(this, [].slice.call(arguments, 1))\n        }\n    }\n    \n    command.execute('buy', 'VIP', '200');\n    command.execute('sale', '节操', '998');\n    command.execute('say', 'VIP', '123');\n")])])]),t("h3",{attrs:{id:"策略模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[n._v("#")]),n._v(" 策略模式")]),n._v(" "),t("blockquote",[t("p",[n._v("策略模式最大的好处是：减少if-else的使用，同时增加代码可读性")])]),n._v(" "),t("p",[n._v("简单的年终奖计算。（策略模式放在必填项/规则验证会很便捷）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    // 策略模式\n    const bonus = {\n        A: function(base) {\n            return base * 4;\n        },\n        B: function(base) {\n            return base * 3;\n        },\n        C: function(base) {\n            return base * 2;\n        },\n        D: function(base) {\n            return base;\n        }\n    }\n\n    const level = "B";\n    const base = "1008611";\n    const yearBouns = bonus[level](base);\n    console.log(yearBouns)\n')])])]),t("h3",{attrs:{id:"工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[n._v("#")]),n._v(" 工厂模式")]),n._v(" "),t("blockquote",[t("p",[n._v("一个工厂(类) 能生产各种零件(实例)")])]),n._v(" "),t("h5",{attrs:{id:"简单的工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的工厂模式"}},[n._v("#")]),n._v(" 简单的工厂模式")]),n._v(" "),t("p",[n._v("通过一个类获取不同类的实例")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    class Cat {}\n    class Dog {}\n    class Pig {}\n    \n    function Factory(type, args) {\n        switch (type){\n            case 'cat':\n                return new Cat(args);\n                break;\n            case 'dog':\n                return new Dog(args);\n                break;\n            default:\n                return new Pig(args);\n                break;\n        }\n    }\n    \n    const cat = new Factory('cat', {name: 'cat'});\n    const dog = new Factory('dog', {name: 'dog'});\n    const pig = new Factory('pig', {name: 'pig'});\n    \n    console.log(cat, dog, pig)\n")])])]),t("h5",{attrs:{id:"抽象工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式"}},[n._v("#")]),n._v(" 抽象工厂模式")]),n._v(" "),t("p",[n._v("通过继承抽象的类（含有未实现的方法）、结合简单工厂模式，生成抽象工厂")]),n._v(" "),t("p",[n._v("抽象工厂的好处：通用方法写在工厂函数中，不需要重复实现，不同个性化代码在子类中实现")]),n._v(" "),t("p",[n._v("实现：省略...")]),n._v(" "),t("h5",{attrs:{id:"复杂工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复杂工厂模式"}},[n._v("#")]),n._v(" 复杂工厂模式")]),n._v(" "),t("p",[n._v("允许工厂产生的不同零件一起工作：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    class Wheel {\n        turn() {\n            console.log('轮子开始转动啦');\n        }\n    }\n    \n    class Oil {\n        warn() {\n            console.log('汽油不足')\n        }\n    }\n    \n    class Cart {\n        constructor() {\n            this.cart = {}\n        }\n        \n        getPart(name, args) {\n            return this.cart[name] ? new this.cart[name](args) : null;\n        }\n        \n        setPart(name, Part) {\n            this.cart[name] = Part;\n        }\n    }\n    \n    const cart = new Cart();\n    \n    cart.setPart('wheel', Wheel)\n    cart.setPart('oil', Oil)\n    \n    const wheel = cart.getPart('wheel', {name: '轮子A'});\n    const oil = cart.getPart('oil', {name: '汽油A'});\n    \n    wheel.turn();\n    oil.warn();\n")])])]),t("h3",{attrs:{id:"修饰器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰器模式"}},[n._v("#")]),n._v(" 修饰器模式")]),n._v(" "),t("blockquote",[t("p",[n._v("修饰：不改变原有对象，在其基础上进行拓展")])]),n._v(" "),t("p",[n._v("基本上每天都在用的设计模式...")]),n._v(" "),t("p",[n._v("简单的修饰模式实现：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const after = function(fn, afterFn) {\n        return function() {\n            fn.apply(this, arguments)\n            afterFn.apply(this, arguments)\n        }\n    }\n\n    const myAfter = after(after(fn1, fn2), fn3)\n    myAfter()\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);